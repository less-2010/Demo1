package day10.oop5;

/**
 *  在java中，可以通过两种形式来体现OOP的抽象：接口和抽象类
 * 
 * 
 * 在代码实现过程中，抽象类其实是一种自下而上的设计思想，现有子类的代码重复然后抽象成上层的父类。
 * 接口是自上而下的设计思路，在代码实现中，先设计好接口再考虑具体实现。
 * 
 * 
 *       抽象类
 * 访问修饰符 不能用private,子类的权限修饰符必须比父类的权限大才能继承父类.
 *   
 * 1、抽象类是子类的超类,用来捕捉子类的通用特性，包括行为及属性； 
 * 2、抽象类不能被实例化,只能被继承，通过子类继承抽象父类实现各自自所需功能；
 * 3、子类继承抽象类,子类必须实现抽象父类所有抽象方法,否则子类也要写成抽象类；
 * 4、子类的权限修饰符必须比父类的权限大才能继承父类
 * 
 *     
 *      接口
 * 接口类是抽象类的变体，接口比抽象类更加抽象，接口中所有的方法都是抽象的
 * 每个类都只能继承一个抽象类，但是可以实现多个接口
 * 抽象类中不一定都是抽象方法，抽象的而抽象类可以实现部分方法，但是接口中方法必须为public修饰、抽象的不能实现具体的法
 * 接口中的基本数据类型是static而抽象类是不行的
 * 
 *       两者区别
 * 
 * 
 * 
 */
public abstract class Animal {  // 创建抽象类 
/**
 * 抽象方法 只能声明于类且不包含方法体{}，必须用关键字abstrcat修饰;
 * 声明格式：【访问修饰符】{public | protected} absreact void 【方法名】;
 * 
 * 
 */

   
    public  abstract void shout(); // 创建抽象方法

    public abstract void eat(); 

}

