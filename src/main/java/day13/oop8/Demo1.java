package day13.oop8;

public class Demo1 {
 /*
    # 面向对象

        ## 7、考点专题

            ### 7-1、方法重写的“两同两小一大”原则

                1) 两同:方法名相同，参数列表相同
                2) 两小:
                    2-1) 子类方法的返回值类型小于或等于父类的
                        2-1-1) void和基本类型时必须相同
                        2-2-2) 引用类型时小于或等于
                3) 一大:
                    子类的访问权限大于或等于父类的 子类的访问控制小于父类的，确保访问父类时一定能访问子类

            ### 7-2、this和super 关键字的概念和使用场景

                    1) this: 代表本对象。使用场景:在本类中调用本对象。
                    2) super: 代表本对象的父类对象。使用场景:在子类中调用本对象的父类对象

            ### 7-3、方法重载和重写的含义，以及为什么要使用方法的重载和重写

                    1)重载:
                        1-1)含义:方法名相同，参数列表不同，发生在同一个类中。
                        1-2)意义:解决同一个类功能相似但并不相同的行为设计问题。
                    2)重写:
                        2-1)含义:方法名相同，参数列表相同，发生在父子类中。
                        2-2)意义:解决父子类之间功能相同但表现形态不同的行为设计问题。

            ### 7-4、阐述形参和实参的使用

                    1)形参:定义时可以没有实际值，但要有数据类型，可以接受实参传递过来的相应
                    数据类型的数据值。
                    2)实参:可以是常量，也可以是变量，数据类型必须和形参保持一 致;如果是变量,
                    在传递时里面必须存有实际的值。
                    3)传递方式:位置对应原则。
            ### 7-5、多态的概念及为何要使用多态
                    1) 概念:
                        顾名思义，是指多种形态;相同的调用，得到不同的形态结果。不同子类
                    或实现类的引用值赋值给父类或父接口的引用变量，调用父类或父接口的方法时，
                    会运行不同子类或实现类的不同方法。形成多态的三个前提条件:继承、重写、向上
                    造型。
                    2)意义:
                        提供统一入口形成约定、提高代码复用性、提高代码可扩展性、降低代码
                    的耦合度
            ### 7-6、写出至少20个java中常用关键字
                    (略，自己做)
            ### 7-7、Java中 流程控制语句有哪些?
                    (略，自己做)
            ### 7-8、 普通类、抽象类、接口这三者异同点，及其使用场景

                1]相同点:都可以声明引用、都可以向上造型。
                2]不同点及使用场景:

                1)普通类:
                    有构造方法，可以new对象; 可以写普通方法，不能写抽象方法;既可以
                有成员变量，也可以有静态变量;只能单继承。使用场景:所有对象最终都是通过
                普通类来描绘的，普通类是new对象的模板。
                2)抽象类:
                    有构造方法，不能new对象;可以写普通方法，也可以写抽象方法;既可以
                有成员变量，也可以有静态变量;只能单继承。使用场景:当某个类不具备足够的信息
                来描绘一个对象时，可以设置为抽象类;抽象类是对某类事物全部的、正式的抽象，
                可以对该类事物进行属性和行为上的全面约束。
                3)接口:
                    没有构造方法，不能new对象;不可以写普通方法，只能写抽象方法;不能有
                成员变量，只能有静态常量;可以多继承。使用场景:当想要对某些类进行行为上的
                约束，或者行为上也不约束、而只是作为某些类的共同标识时，使用接口;接口是对
                某些事物方法部分的、撮合性的抽象。
            ###　7-9、权限修饰符有哪些，各自使用范围是什么

                1)public:
                    全项目范围
                2) protected:
                    同包以及异包继承或实现
                3) (default):
                    同包
                4) private:
                    本类型内部

            ### 7-10、什么是类成员?什么是实例成员?区别是什么?

                1)类成员:
                    static修饰的，属于类的，属性可以类名点调用、也可以对象名点调用，
                行为必须类名点调用，加载时相对先加载一类加载时即加载。
                2)实例成员:
                    没有static修饰的，属于实例的，属性和行为都必须对象名点来调用，
                加载时相对后加载一new对 象时实例化。






  */
}
